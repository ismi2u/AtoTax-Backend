// <auto-generated />
using System;
using AtoTaxAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AtoTax.API.Migrations
{
    [DbContext(typeof(AtoTaxDbContext))]
    [Migration("20230409121145_second")]
    partial class second
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AtoTax.API.Authentication.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DOJ")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("AtoTax.Domain.Entities.AccountLedger", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<double?>("ExpenseAmount")
                        .HasColumnType("double precision");

                    b.Property<Guid?>("GSTClientId")
                        .HasColumnType("uuid");

                    b.Property<double?>("IncomeAmount")
                        .HasColumnType("double precision");

                    b.Property<bool?>("IsGSTClientPaid")
                        .HasColumnType("boolean");

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TransactionRecordedBy")
                        .HasColumnType("text");

                    b.Property<string>("TransactionReferenceNo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GSTClientId");

                    b.HasIndex("PaymentTypeId");

                    b.ToTable("AccountLedgers");
                });

            modelBuilder.Entity("AtoTax.Domain.Entities.AddressType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressTypeDesc")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AddressTypeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("AddressTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressTypeDesc = "Postal Street address",
                            AddressTypeName = "Office Street Address",
                            CreatedDate = new DateTime(2023, 4, 9, 12, 11, 44, 769, DateTimeKind.Utc).AddTicks(2083),
                            LastModifiedDate = new DateTime(2023, 4, 9, 12, 11, 44, 769, DateTimeKind.Utc).AddTicks(2085),
                            StatusId = 1
                        },
                        new
                        {
                            Id = 2,
                            AddressTypeDesc = "Residential Street address",
                            AddressTypeName = "Residential Address",
                            CreatedDate = new DateTime(2023, 4, 9, 12, 11, 44, 769, DateTimeKind.Utc).AddTicks(2087),
                            LastModifiedDate = new DateTime(2023, 4, 9, 12, 11, 44, 769, DateTimeKind.Utc).AddTicks(2087),
                            StatusId = 1
                        },
                        new
                        {
                            Id = 3,
                            AddressTypeDesc = "Godown/Factory Address",
                            AddressTypeName = "Godown/Factory Address",
                            CreatedDate = new DateTime(2023, 4, 9, 12, 11, 44, 769, DateTimeKind.Utc).AddTicks(2088),
                            LastModifiedDate = new DateTime(2023, 4, 9, 12, 11, 44, 769, DateTimeKind.Utc).AddTicks(2089),
                            StatusId = 1
                        },
                        new
                        {
                            Id = 4,
                            AddressTypeDesc = "Postoffice Box Number",
                            AddressTypeName = "PostBox Address",
                            CreatedDate = new DateTime(2023, 4, 9, 12, 11, 44, 769, DateTimeKind.Utc).AddTicks(2090),
                            LastModifiedDate = new DateTime(2023, 4, 9, 12, 11, 44, 769, DateTimeKind.Utc).AddTicks(2091),
                            StatusId = 1
                        });
                });

            modelBuilder.Entity("AtoTax.Domain.Entities.AmendType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AmendTypeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("AmendTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AmendTypeName = "Core",
                            CreatedDate = new DateTime(2023, 4, 9, 12, 11, 44, 769, DateTimeKind.Utc).AddTicks(1937),
                            LastModifiedDate = new DateTime(2023, 4, 9, 12, 11, 44, 769, DateTimeKind.Utc).AddTicks(1941),
                            StatusId = 1
                        },
                        new
                        {
                            Id = 2,
                            AmendTypeName = "Non-Core",
                            CreatedDate = new DateTime(2023, 4, 9, 12, 11, 44, 769, DateTimeKind.Utc).AddTicks(1942),
                            LastModifiedDate = new DateTime(2023, 4, 9, 12, 11, 44, 769, DateTimeKind.Utc).AddTicks(1943),
                            StatusId = 1
                        });
                });

            modelBuilder.Entity("AtoTax.Domain.Entities.Amendment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ARN")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("AmendTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("ApprovalStatusTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GSTClientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("SumittedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AmendTypeId");

                    b.HasIndex("ApprovalStatusTypeId");

                    b.HasIndex("GSTClientId");

                    b.ToTable("Amendments");
                });

            modelBuilder.Entity("AtoTax.Domain.Entities.ApprovalStatusType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("StatusType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ApprovalStatusTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            StatusType = "Pending"
                        },
                        new
                        {
                            Id = 2,
                            StatusType = "Approved"
                        },
                        new
                        {
                            Id = 3,
                            StatusType = "Rejected"
                        });
                });

            modelBuilder.Entity("AtoTax.Domain.Entities.ClientFeeMap", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("DefaultCharge")
                        .HasColumnType("double precision");

                    b.Property<Guid>("GSTClientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ReturnFrequencyTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GSTClientId");

                    b.HasIndex("ReturnFrequencyTypeId");

                    b.ToTable("ClientFeeMaps");
                });

            modelBuilder.Entity("AtoTax.Domain.Entities.ClientMonthlyPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<string>("DueMonth")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("DueYear")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.Property<Guid>("GSTClientId")
                        .HasColumnType("uuid");

                    b.Property<string>("PaymentReferenceNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("integer");

                    b.Property<double?>("ReceivedAmount")
                        .IsRequired()
                        .HasColumnType("double precision");

                    b.Property<int>("ReturnFrequencyTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TransactionRecordedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GSTClientId");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("ReturnFrequencyTypeId");

                    b.ToTable("ClientMonthlyPayments");
                });

            modelBuilder.Entity("AtoTax.Domain.Entities.GSTBillsProcessing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DueMonth")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DueYear")
                        .HasColumnType("integer");

                    b.Property<string>("FiledBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("FiledDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GSTClientId")
                        .HasColumnType("uuid");

                    b.Property<bool?>("GSTFiledAckEmailSent")
                        .HasColumnType("boolean");

                    b.Property<bool?>("GSTFiledAckSMSSent")
                        .HasColumnType("boolean");

                    b.Property<int?>("GSTFilingTypeId")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.Property<bool?>("IsBillsReceived")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsFiled")
                        .HasColumnType("boolean");

                    b.Property<int>("MultimediaTypeId")
                        .HasColumnType("integer");

                    b.Property<bool?>("ReceivedAckEmailSent")
                        .HasColumnType("boolean");

                    b.Property<bool?>("ReceivedAckSMSSent")
                        .HasColumnType("boolean");

                    b.Property<string>("ReceivedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReceivedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ReturnFrequencyTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GSTClientId");

                    b.HasIndex("GSTFilingTypeId");

                    b.HasIndex("MultimediaTypeId");

                    b.HasIndex("ReturnFrequencyTypeId");

                    b.ToTable("GSTBillsProcessings");
                });

            modelBuilder.Entity("AtoTax.Domain.Entities.GSTClient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientRelationMgrId")
                        .HasColumnType("uuid");

                    b.Property<string>("ContactEmailId")
                        .HasColumnType("text");

                    b.Property<string>("ContactName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EWAYBillPassword")
                        .HasColumnType("text");

                    b.Property<string>("EWAYBillUserName")
                        .HasColumnType("text");

                    b.Property<double?>("GSTAnnualTurnOver")
                        .HasColumnType("double precision");

                    b.Property<string>("GSTEmailId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GSTEmailPassword")
                        .HasColumnType("text");

                    b.Property<string>("GSTIN")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GSTRecoveryEmailId")
                        .HasColumnType("text");

                    b.Property<string>("GSTRecoveryEmailPassword")
                        .HasColumnType("text");

                    b.Property<DateTime>("GSTRegDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("GSTRelievedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("GSTSurrenderedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("GSTUserName")
                        .HasColumnType("text");

                    b.Property<string>("GSTUserPassword")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("ProprietorName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("RackFileNo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<string>("TallyDataFilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("isRegular")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("GSTClients");
                });

            modelBuilder.Entity("AtoTax.Domain.Entities.GSTClientAddressExtension", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("text");

                    b.Property<string>("AddressLine3")
                        .HasColumnType("text");

                    b.Property<int>("AddressTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("District")
                        .HasColumnType("text");

                    b.Property<Guid>("GSTClientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Pincode")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AddressTypeId");

                    b.HasIndex("GSTClientId");

                    b.HasIndex("StatusId");

                    b.ToTable("GSTClientAddressExtensions");
                });

            modelBuilder.Entity("AtoTax.Domain.Entities.GSTFilingType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FilingType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("GSTFilingTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 4, 9, 12, 11, 44, 769, DateTimeKind.Utc).AddTicks(1993),
                            FilingType = "GSTR-1",
                            LastModifiedDate = new DateTime(2023, 4, 9, 12, 11, 44, 769, DateTimeKind.Utc).AddTicks(1994),
                            StatusId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 4, 9, 12, 11, 44, 769, DateTimeKind.Utc).AddTicks(1995),
                            FilingType = "GSTR-3B",
                            LastModifiedDate = new DateTime(2023, 4, 9, 12, 11, 44, 769, DateTimeKind.Utc).AddTicks(1996),
                            StatusId = 1
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2023, 4, 9, 12, 11, 44, 769, DateTimeKind.Utc).AddTicks(1997),
                            FilingType = "GSTR-9",
                            LastModifiedDate = new DateTime(2023, 4, 9, 12, 11, 44, 769, DateTimeKind.Utc).AddTicks(1998),
                            StatusId = 1
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2023, 4, 9, 12, 11, 44, 769, DateTimeKind.Utc).AddTicks(1999),
                            FilingType = "GSTR-9C",
                            LastModifiedDate = new DateTime(2023, 4, 9, 12, 11, 44, 769, DateTimeKind.Utc).AddTicks(1999),
                            StatusId = 1
                        },
                        new
                        {
                            Id = 11,
                            CreatedDate = new DateTime(2023, 4, 9, 12, 11, 44, 769, DateTimeKind.Utc).AddTicks(2000),
                            FilingType = "GSTR-10",
                            LastModifiedDate = new DateTime(2023, 4, 9, 12, 11, 44, 769, DateTimeKind.Utc).AddTicks(2001),
                            StatusId = 1
                        },
                        new
                        {
                            Id = 14,
                            CreatedDate = new DateTime(2023, 4, 9, 12, 11, 44, 769, DateTimeKind.Utc).AddTicks(2002),
                            FilingType = "NILGSTR1",
                            LastModifiedDate = new DateTime(2023, 4, 9, 12, 11, 44, 769, DateTimeKind.Utc).AddTicks(2002),
                            StatusId = 1
                        },
                        new
                        {
                            Id = 15,
                            CreatedDate = new DateTime(2023, 4, 9, 12, 11, 44, 769, DateTimeKind.Utc).AddTicks(2003),
                            FilingType = "NIL3B",
                            LastModifiedDate = new DateTime(2023, 4, 9, 12, 11, 44, 769, DateTimeKind.Utc).AddTicks(2004),
                            StatusId = 1
                        });
                });

            modelBuilder.Entity("AtoTax.Domain.Entities.GSTPaidDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<Guid>("GSTClientId")
                        .HasColumnType("uuid");

                    b.Property<bool?>("IsPending")
                        .HasColumnType("boolean");

                    b.Property<string>("PaymentDueMonth")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PaymentDueYear")
                        .HasColumnType("integer");

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("ReturnFrequencyTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("SettledDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("GSTClientId");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("ReturnFrequencyTypeId");

                    b.ToTable("GSTPaidDetails");
                });

            modelBuilder.Entity("AtoTax.Domain.Entities.MonthAndYear", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FiscalYear")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Month")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MonthIdx")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MonthYear")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("MonthAndYears");
                });

            modelBuilder.Entity("AtoTax.Domain.Entities.MonthlyFiling", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DueMonth")
                        .HasColumnType("text");

                    b.Property<int?>("DueYear")
                        .HasColumnType("integer");

                    b.Property<string>("FiscalYear")
                        .HasColumnType("text");

                    b.Property<Guid>("GSTClientId")
                        .HasColumnType("uuid");

                    b.Property<string>("GSTR1FiledByUser")
                        .HasColumnType("text");

                    b.Property<bool?>("GSTR3BFiled")
                        .HasColumnType("boolean");

                    b.Property<string>("GSTR3BFiledByUser")
                        .HasColumnType("text");

                    b.Property<DateTime?>("GSTR3BFiledDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("GSTR3BNILFiled")
                        .HasColumnType("boolean");

                    b.Property<bool?>("GSTR3BNilNotFiled")
                        .HasColumnType("boolean");

                    b.Property<bool?>("GSTR3BNotFiled")
                        .HasColumnType("boolean");

                    b.Property<double?>("GSTTaxAmount")
                        .HasColumnType("double precision");

                    b.Property<double?>("PurchaseCGST")
                        .HasColumnType("double precision");

                    b.Property<double?>("PurchaseIGST")
                        .HasColumnType("double precision");

                    b.Property<bool?>("PurchaseInvoice")
                        .HasColumnType("boolean");

                    b.Property<bool?>("PurchaseNil")
                        .HasColumnType("boolean");

                    b.Property<double?>("PurchaseSGST")
                        .HasColumnType("double precision");

                    b.Property<double?>("PurchaseTaxable")
                        .HasColumnType("double precision");

                    b.Property<string>("RackFileNo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReceivedByUser")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReceivedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ReturnFrequencyTypeId")
                        .HasColumnType("integer");

                    b.Property<bool?>("SalesBillsNil")
                        .HasColumnType("boolean");

                    b.Property<double?>("SalesCGST")
                        .HasColumnType("double precision");

                    b.Property<bool?>("SalesFiled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("SalesFiledDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("SalesIGST")
                        .HasColumnType("double precision");

                    b.Property<bool?>("SalesInvoice")
                        .HasColumnType("boolean");

                    b.Property<bool?>("SalesNilFiled")
                        .HasColumnType("boolean");

                    b.Property<bool?>("SalesNilNotFiled")
                        .HasColumnType("boolean");

                    b.Property<bool?>("SalesNotFiled")
                        .HasColumnType("boolean");

                    b.Property<double?>("SalesSGST")
                        .HasColumnType("double precision");

                    b.Property<double?>("SalesTaxable")
                        .HasColumnType("double precision");

                    b.Property<double?>("ServiceFee")
                        .HasColumnType("double precision");

                    b.Property<double?>("ServiceFeeBalance")
                        .HasColumnType("double precision");

                    b.Property<double?>("ServiceFeeReceived")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("GSTClientId");

                    b.HasIndex("ReturnFrequencyTypeId");

                    b.ToTable("MonthlyFilings");
                });

            modelBuilder.Entity("AtoTax.Domain.Entities.MultimediaType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Media")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("MultimediaTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 4, 9, 12, 11, 44, 769, DateTimeKind.Utc).AddTicks(2032),
                            LastModifiedDate = new DateTime(2023, 4, 9, 12, 11, 44, 769, DateTimeKind.Utc).AddTicks(2033),
                            Media = "HardCopy",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 4, 9, 12, 11, 44, 769, DateTimeKind.Utc).AddTicks(2035),
                            LastModifiedDate = new DateTime(2023, 4, 9, 12, 11, 44, 769, DateTimeKind.Utc).AddTicks(2036),
                            Media = "Email",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 4, 9, 12, 11, 44, 769, DateTimeKind.Utc).AddTicks(2037),
                            LastModifiedDate = new DateTime(2023, 4, 9, 12, 11, 44, 769, DateTimeKind.Utc).AddTicks(2037),
                            Media = "WhatsApp",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 4, 9, 12, 11, 44, 769, DateTimeKind.Utc).AddTicks(2038),
                            LastModifiedDate = new DateTime(2023, 4, 9, 12, 11, 44, 769, DateTimeKind.Utc).AddTicks(2039),
                            Media = "USB/Pen Drive",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 4, 9, 12, 11, 44, 769, DateTimeKind.Utc).AddTicks(2040),
                            LastModifiedDate = new DateTime(2023, 4, 9, 12, 11, 44, 769, DateTimeKind.Utc).AddTicks(2040),
                            Media = "Courier",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2023, 4, 9, 12, 11, 44, 769, DateTimeKind.Utc).AddTicks(2041),
                            LastModifiedDate = new DateTime(2023, 4, 9, 12, 11, 44, 769, DateTimeKind.Utc).AddTicks(2042),
                            Media = "Cloud Drive",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2023, 4, 9, 12, 11, 44, 769, DateTimeKind.Utc).AddTicks(2043),
                            LastModifiedDate = new DateTime(2023, 4, 9, 12, 11, 44, 769, DateTimeKind.Utc).AddTicks(2043),
                            Media = "Hard Disk",
                            StatusId = 1
                        });
                });

            modelBuilder.Entity("AtoTax.Domain.Entities.PaymentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("PaymentTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 4, 9, 12, 11, 44, 769, DateTimeKind.Utc).AddTicks(1959),
                            LastModifiedDate = new DateTime(2023, 4, 9, 12, 11, 44, 769, DateTimeKind.Utc).AddTicks(1960),
                            PaymentMethod = "Cash",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 4, 9, 12, 11, 44, 769, DateTimeKind.Utc).AddTicks(1961),
                            LastModifiedDate = new DateTime(2023, 4, 9, 12, 11, 44, 769, DateTimeKind.Utc).AddTicks(1962),
                            PaymentMethod = "Bank Transfer",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 4, 9, 12, 11, 44, 769, DateTimeKind.Utc).AddTicks(1963),
                            LastModifiedDate = new DateTime(2023, 4, 9, 12, 11, 44, 769, DateTimeKind.Utc).AddTicks(1963),
                            PaymentMethod = "UPIPay",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 4, 9, 12, 11, 44, 769, DateTimeKind.Utc).AddTicks(1964),
                            LastModifiedDate = new DateTime(2023, 4, 9, 12, 11, 44, 769, DateTimeKind.Utc).AddTicks(1965),
                            PaymentMethod = "GooglePay",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 4, 9, 12, 11, 44, 769, DateTimeKind.Utc).AddTicks(1966),
                            LastModifiedDate = new DateTime(2023, 4, 9, 12, 11, 44, 769, DateTimeKind.Utc).AddTicks(1966),
                            PaymentMethod = "Bank Cheque",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2023, 4, 9, 12, 11, 44, 769, DateTimeKind.Utc).AddTicks(1967),
                            LastModifiedDate = new DateTime(2023, 4, 9, 12, 11, 44, 769, DateTimeKind.Utc).AddTicks(1968),
                            PaymentMethod = "PayTM",
                            StatusId = 1
                        });
                });

            modelBuilder.Entity("AtoTax.Domain.Entities.ProcessTrackingAndFeeBalance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double?>("AmountPaid")
                        .HasColumnType("double precision");

                    b.Property<double?>("CurrentBalance")
                        .HasColumnType("double precision");

                    b.Property<string>("DueMonth")
                        .HasColumnType("text");

                    b.Property<int?>("DueYear")
                        .HasColumnType("integer");

                    b.Property<double?>("FeesAmount")
                        .HasColumnType("double precision");

                    b.Property<string>("FiscalYear")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("GSTClientId")
                        .HasColumnType("uuid");

                    b.Property<string>("GSTR1FiledByUser")
                        .HasColumnType("text");

                    b.Property<bool?>("GSTR3BFiled")
                        .HasColumnType("boolean");

                    b.Property<string>("GSTR3BFiledByUser")
                        .HasColumnType("text");

                    b.Property<DateTime?>("GSTR3BFiledDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("GSTR3BNILFiled")
                        .HasColumnType("boolean");

                    b.Property<bool?>("GSTR3BNilNotFiled")
                        .HasColumnType("boolean");

                    b.Property<bool?>("GSTR3BNotFiled")
                        .HasColumnType("boolean");

                    b.Property<double?>("GSTTaxAmount")
                        .HasColumnType("double precision");

                    b.Property<bool?>("PurchaseInvoice")
                        .HasColumnType("boolean");

                    b.Property<bool?>("PurchaseNil")
                        .HasColumnType("boolean");

                    b.Property<string>("RackFileNo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReceivedByUser")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReceivedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ReturnFrequencyTypeId")
                        .HasColumnType("integer");

                    b.Property<bool?>("SalesBillsNil")
                        .HasColumnType("boolean");

                    b.Property<bool?>("SalesFiled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("SalesFiledDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("SalesInvoice")
                        .HasColumnType("boolean");

                    b.Property<bool?>("SalesNilFiled")
                        .HasColumnType("boolean");

                    b.Property<bool?>("SalesNilNotFiled")
                        .HasColumnType("boolean");

                    b.Property<bool?>("SalesNotFiled")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("GSTClientId");

                    b.HasIndex("ReturnFrequencyTypeId");

                    b.ToTable("ProcessTrackingAndFeeBalances");
                });

            modelBuilder.Entity("AtoTax.Domain.Entities.ReturnFrequencyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("FixedCharge")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("PreviousCharge")
                        .HasColumnType("double precision");

                    b.Property<string>("ReturnFreqType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("ReturnFrequencyType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 4, 9, 12, 11, 44, 769, DateTimeKind.Utc).AddTicks(2110),
                            Description = "GSTR-1 & GSTR-3B",
                            FixedCharge = 500.0,
                            LastModifiedDate = new DateTime(2023, 4, 9, 12, 11, 44, 769, DateTimeKind.Utc).AddTicks(2111),
                            PreviousCharge = 500.0,
                            ReturnFreqType = "Monthly-Return",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 4, 9, 12, 11, 44, 769, DateTimeKind.Utc).AddTicks(2113),
                            Description = "NILGSTR-1 & NILGSTR-3B",
                            FixedCharge = 300.0,
                            LastModifiedDate = new DateTime(2023, 4, 9, 12, 11, 44, 769, DateTimeKind.Utc).AddTicks(2113),
                            PreviousCharge = 300.0,
                            ReturnFreqType = "NilGSTR",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 4, 9, 12, 11, 44, 769, DateTimeKind.Utc).AddTicks(2115),
                            Description = "Quaterly GSTR-1 & GSTR-3B",
                            FixedCharge = 1000.0,
                            LastModifiedDate = new DateTime(2023, 4, 9, 12, 11, 44, 769, DateTimeKind.Utc).AddTicks(2115),
                            PreviousCharge = 1000.0,
                            ReturnFreqType = "Quaterly-Return",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 4, 9, 12, 11, 44, 769, DateTimeKind.Utc).AddTicks(2117),
                            Description = "Annual GSTR-9",
                            FixedCharge = 1000.0,
                            LastModifiedDate = new DateTime(2023, 4, 9, 12, 11, 44, 769, DateTimeKind.Utc).AddTicks(2117),
                            PreviousCharge = 1000.0,
                            ReturnFreqType = "Annual-Return",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 4, 9, 12, 11, 44, 769, DateTimeKind.Utc).AddTicks(2119),
                            Description = "GSTR-10 Final Return",
                            FixedCharge = 500.0,
                            LastModifiedDate = new DateTime(2023, 4, 9, 12, 11, 44, 769, DateTimeKind.Utc).AddTicks(2119),
                            PreviousCharge = 500.0,
                            ReturnFreqType = "FinalReturn",
                            StatusId = 1
                        });
                });

            modelBuilder.Entity("AtoTax.Domain.Entities.ServiceChargeUpdateHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AmendedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GSTClientId")
                        .HasColumnType("uuid");

                    b.Property<double>("NewRate")
                        .HasColumnType("double precision");

                    b.Property<double>("PreviousRate")
                        .HasColumnType("double precision");

                    b.Property<int>("ReturnFrequencyTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GSTClientId");

                    b.HasIndex("ReturnFrequencyTypeId");

                    b.ToTable("ServiceChargeUpdateHistories");
                });

            modelBuilder.Entity("AtoTax.Domain.Entities.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("StatusType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Status");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            StatusType = "active"
                        },
                        new
                        {
                            Id = 2,
                            StatusType = "inactive"
                        });
                });

            modelBuilder.Entity("AtoTax.Domain.Entities.UserLoggedActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Activity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AdditionalDetails")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("loggedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("UserLoggedActivities");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AtoTax.Domain.Entities.AccountLedger", b =>
                {
                    b.HasOne("AtoTax.Domain.Entities.GSTClient", "GSTClient")
                        .WithMany()
                        .HasForeignKey("GSTClientId");

                    b.HasOne("AtoTax.Domain.Entities.PaymentType", "PaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GSTClient");

                    b.Navigation("PaymentType");
                });

            modelBuilder.Entity("AtoTax.Domain.Entities.AddressType", b =>
                {
                    b.HasOne("AtoTax.Domain.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("AtoTax.Domain.Entities.AmendType", b =>
                {
                    b.HasOne("AtoTax.Domain.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("AtoTax.Domain.Entities.Amendment", b =>
                {
                    b.HasOne("AtoTax.Domain.Entities.AmendType", "AmendType")
                        .WithMany()
                        .HasForeignKey("AmendTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AtoTax.Domain.Entities.ApprovalStatusType", "ApprovalStatusType")
                        .WithMany()
                        .HasForeignKey("ApprovalStatusTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AtoTax.Domain.Entities.GSTClient", "GSTClient")
                        .WithMany()
                        .HasForeignKey("GSTClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AmendType");

                    b.Navigation("ApprovalStatusType");

                    b.Navigation("GSTClient");
                });

            modelBuilder.Entity("AtoTax.Domain.Entities.ClientFeeMap", b =>
                {
                    b.HasOne("AtoTax.Domain.Entities.GSTClient", "GSTClient")
                        .WithMany()
                        .HasForeignKey("GSTClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AtoTax.Domain.Entities.ReturnFrequencyType", "ReturnFrequencyType")
                        .WithMany()
                        .HasForeignKey("ReturnFrequencyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GSTClient");

                    b.Navigation("ReturnFrequencyType");
                });

            modelBuilder.Entity("AtoTax.Domain.Entities.ClientMonthlyPayment", b =>
                {
                    b.HasOne("AtoTax.Domain.Entities.GSTClient", "GSTClient")
                        .WithMany()
                        .HasForeignKey("GSTClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AtoTax.Domain.Entities.PaymentType", "PaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AtoTax.Domain.Entities.ReturnFrequencyType", "ReturnFrequencyType")
                        .WithMany()
                        .HasForeignKey("ReturnFrequencyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GSTClient");

                    b.Navigation("PaymentType");

                    b.Navigation("ReturnFrequencyType");
                });

            modelBuilder.Entity("AtoTax.Domain.Entities.GSTBillsProcessing", b =>
                {
                    b.HasOne("AtoTax.Domain.Entities.GSTClient", "GSTClient")
                        .WithMany()
                        .HasForeignKey("GSTClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AtoTax.Domain.Entities.GSTFilingType", "GSTFilingType")
                        .WithMany()
                        .HasForeignKey("GSTFilingTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AtoTax.Domain.Entities.MultimediaType", "MultimediaType")
                        .WithMany()
                        .HasForeignKey("MultimediaTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AtoTax.Domain.Entities.ReturnFrequencyType", "ReturnFrequencyType")
                        .WithMany()
                        .HasForeignKey("ReturnFrequencyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GSTClient");

                    b.Navigation("GSTFilingType");

                    b.Navigation("MultimediaType");

                    b.Navigation("ReturnFrequencyType");
                });

            modelBuilder.Entity("AtoTax.Domain.Entities.GSTClient", b =>
                {
                    b.HasOne("AtoTax.Domain.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("AtoTax.Domain.Entities.GSTClientAddressExtension", b =>
                {
                    b.HasOne("AtoTax.Domain.Entities.AddressType", "AddressType")
                        .WithMany()
                        .HasForeignKey("AddressTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AtoTax.Domain.Entities.GSTClient", "GSTClient")
                        .WithMany()
                        .HasForeignKey("GSTClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AtoTax.Domain.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AddressType");

                    b.Navigation("GSTClient");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("AtoTax.Domain.Entities.GSTFilingType", b =>
                {
                    b.HasOne("AtoTax.Domain.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("AtoTax.Domain.Entities.GSTPaidDetail", b =>
                {
                    b.HasOne("AtoTax.Domain.Entities.GSTClient", "GSTClient")
                        .WithMany()
                        .HasForeignKey("GSTClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AtoTax.Domain.Entities.PaymentType", "PaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AtoTax.Domain.Entities.ReturnFrequencyType", "ReturnFrequencyType")
                        .WithMany()
                        .HasForeignKey("ReturnFrequencyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GSTClient");

                    b.Navigation("PaymentType");

                    b.Navigation("ReturnFrequencyType");
                });

            modelBuilder.Entity("AtoTax.Domain.Entities.MonthlyFiling", b =>
                {
                    b.HasOne("AtoTax.Domain.Entities.GSTClient", "GSTClient")
                        .WithMany()
                        .HasForeignKey("GSTClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AtoTax.Domain.Entities.ReturnFrequencyType", "ReturnFrequencyType")
                        .WithMany()
                        .HasForeignKey("ReturnFrequencyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GSTClient");

                    b.Navigation("ReturnFrequencyType");
                });

            modelBuilder.Entity("AtoTax.Domain.Entities.MultimediaType", b =>
                {
                    b.HasOne("AtoTax.Domain.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("AtoTax.Domain.Entities.PaymentType", b =>
                {
                    b.HasOne("AtoTax.Domain.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("AtoTax.Domain.Entities.ProcessTrackingAndFeeBalance", b =>
                {
                    b.HasOne("AtoTax.Domain.Entities.GSTClient", "GSTClient")
                        .WithMany()
                        .HasForeignKey("GSTClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AtoTax.Domain.Entities.ReturnFrequencyType", "ReturnFrequencyType")
                        .WithMany()
                        .HasForeignKey("ReturnFrequencyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GSTClient");

                    b.Navigation("ReturnFrequencyType");
                });

            modelBuilder.Entity("AtoTax.Domain.Entities.ReturnFrequencyType", b =>
                {
                    b.HasOne("AtoTax.Domain.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("AtoTax.Domain.Entities.ServiceChargeUpdateHistory", b =>
                {
                    b.HasOne("AtoTax.Domain.Entities.GSTClient", "GSTClient")
                        .WithMany()
                        .HasForeignKey("GSTClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AtoTax.Domain.Entities.ReturnFrequencyType", "ReturnFrequencyType")
                        .WithMany()
                        .HasForeignKey("ReturnFrequencyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GSTClient");

                    b.Navigation("ReturnFrequencyType");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AtoTax.API.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AtoTax.API.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AtoTax.API.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AtoTax.API.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
