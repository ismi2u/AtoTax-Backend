// <auto-generated />
using System;
using AtoTaxAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AtoTax.API.Migrations
{
    [DbContext(typeof(AtoTaxDbContext))]
    partial class AtoTaxDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AtoTax.API.Authentication.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("integer");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("AtoTax.Domain.Entities.AccountsLedger", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("AmountPaid")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("AmtReceivedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("CurrentBalance")
                        .HasColumnType("double precision");

                    b.Property<string>("DueMonth")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("FeesAmount")
                        .HasColumnType("double precision");

                    b.Property<Guid>("GSTClientId")
                        .HasColumnType("uuid");

                    b.Property<double>("PreviousBalance")
                        .HasColumnType("double precision");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GSTClientId");

                    b.ToTable("AccountsLedgers");
                });

            modelBuilder.Entity("AtoTax.Domain.Entities.AddressType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressTypeDesc")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AddressTypeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("AddressTypes");
                });

            modelBuilder.Entity("AtoTax.Domain.Entities.AmendType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AmendTypeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("AmendTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AmendTypeName = "Core",
                            CreatedDate = new DateTime(2023, 2, 23, 14, 41, 13, 337, DateTimeKind.Utc).AddTicks(1701),
                            LastModifiedDate = new DateTime(2023, 2, 23, 14, 41, 13, 337, DateTimeKind.Utc).AddTicks(1703),
                            StatusId = 1
                        },
                        new
                        {
                            Id = 2,
                            AmendTypeName = "Non-Core",
                            CreatedDate = new DateTime(2023, 2, 23, 14, 41, 13, 337, DateTimeKind.Utc).AddTicks(1705),
                            LastModifiedDate = new DateTime(2023, 2, 23, 14, 41, 13, 337, DateTimeKind.Utc).AddTicks(1706),
                            StatusId = 1
                        });
                });

            modelBuilder.Entity("AtoTax.Domain.Entities.Amendment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ARN")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("AmendTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("ApprovalStatusTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GSTClientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("SumittedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AmendTypeId");

                    b.HasIndex("ApprovalStatusTypeId");

                    b.HasIndex("GSTClientId");

                    b.ToTable("Amendments");
                });

            modelBuilder.Entity("AtoTax.Domain.Entities.ApprovalStatusType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("StatusType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ApprovalStatusTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            StatusType = "Pending"
                        },
                        new
                        {
                            Id = 2,
                            StatusType = "Approved"
                        },
                        new
                        {
                            Id = 3,
                            StatusType = "Rejected"
                        });
                });

            modelBuilder.Entity("AtoTax.Domain.Entities.ClientFeeMap", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("DefaultCharge")
                        .HasColumnType("double precision");

                    b.Property<Guid>("GSTClientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ServiceCategoryId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GSTClientId");

                    b.HasIndex("ServiceCategoryId");

                    b.ToTable("ClientFeeMaps");
                });

            modelBuilder.Entity("AtoTax.Domain.Entities.CollectionAndBalance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("AmountPaid")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("AmountReceivedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("CurrentBalance")
                        .HasColumnType("double precision");

                    b.Property<string>("DueMonth")
                        .HasColumnType("text");

                    b.Property<int?>("DueYear")
                        .HasColumnType("integer");

                    b.Property<double?>("FeesAmount")
                        .HasColumnType("double precision");

                    b.Property<Guid>("GSTClientId")
                        .HasColumnType("uuid");

                    b.Property<double?>("PreviousBalance")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("GSTClientId");

                    b.ToTable("CollectionAndBalances");
                });

            modelBuilder.Entity("AtoTax.Domain.Entities.EmpJobRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("JobDescription")
                        .HasColumnType("text");

                    b.Property<string>("JobRole")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("EmpJobRoles");
                });

            modelBuilder.Entity("AtoTax.Domain.Entities.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcactNo")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DOJ")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EmpJobRoleId")
                        .HasColumnType("integer");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EmpJobRoleId");

                    b.HasIndex("StatusId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("AtoTax.Domain.Entities.GSTBillAndFeeCollection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double?>("Balance")
                        .HasColumnType("double precision");

                    b.Property<string>("DueMonth")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DueYear")
                        .HasColumnType("integer");

                    b.Property<double?>("FeesAmount")
                        .HasColumnType("double precision");

                    b.Property<double?>("FeesPaidAmt")
                        .HasColumnType("double precision");

                    b.Property<int>("FiledBy")
                        .HasColumnType("integer");

                    b.Property<Guid>("FiledByEmployeeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("FiledDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GSTClientId")
                        .HasColumnType("uuid");

                    b.Property<bool?>("GSTFiledAckEmailSent")
                        .HasColumnType("boolean");

                    b.Property<bool?>("GSTFiledAckSMSSent")
                        .HasColumnType("boolean");

                    b.Property<int>("GSTFilingTypeId")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsBillsReceived")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsFiled")
                        .HasColumnType("boolean");

                    b.Property<int>("MultimediaTypeId")
                        .HasColumnType("integer");

                    b.Property<bool?>("ReceivedAckEmailSent")
                        .HasColumnType("boolean");

                    b.Property<bool?>("ReceivedAckSMSSent")
                        .HasColumnType("boolean");

                    b.Property<int>("ReceivedBy")
                        .HasColumnType("integer");

                    b.Property<Guid>("ReceivedByEmployeeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ReceivedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ServiceCategoryId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FiledByEmployeeId");

                    b.HasIndex("GSTClientId");

                    b.HasIndex("GSTFilingTypeId");

                    b.HasIndex("ReceivedByEmployeeId");

                    b.HasIndex("ServiceCategoryId");

                    b.ToTable("GSTBillAndFeeCollections");
                });

            modelBuilder.Entity("AtoTax.Domain.Entities.GSTClient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ContactEmailId")
                        .HasColumnType("text");

                    b.Property<string>("ContactName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EWAYBillPassword")
                        .HasColumnType("text");

                    b.Property<string>("EWAYBillUserName")
                        .HasColumnType("text");

                    b.Property<double?>("GSTAnnualTurnOver")
                        .HasColumnType("double precision");

                    b.Property<string>("GSTEmailId")
                        .HasColumnType("text");

                    b.Property<string>("GSTEmailPassword")
                        .HasColumnType("text");

                    b.Property<string>("GSTIN")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GSTRecoveryEmailId")
                        .HasColumnType("text");

                    b.Property<string>("GSTRecoveryEmailPassword")
                        .HasColumnType("text");

                    b.Property<DateTime>("GSTRegDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("GSTRelievedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("GSTSurrenderedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("GSTUserName")
                        .HasColumnType("text");

                    b.Property<string>("GSTUserPassword")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("ProprietorName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("RackFileNo")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<string>("TallyDataFilePath")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("GSTClients");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ebf7cf6d-26fa-40a7-90ab-b86402a7e594"),
                            ContactEmailId = "test@test.com",
                            ContactName = "Raja Mohamed",
                            CreatedDate = new DateTime(2023, 2, 23, 14, 41, 13, 337, DateTimeKind.Utc).AddTicks(1615),
                            EWAYBillPassword = "EWAYBillPassword",
                            EWAYBillUserName = "EWAYBillUserName",
                            GSTAnnualTurnOver = 10000.0,
                            GSTEmailId = "test1@test.com",
                            GSTEmailPassword = "testerpass",
                            GSTIN = "123456789",
                            GSTRecoveryEmailId = "recover@test.com",
                            GSTRecoveryEmailPassword = "GSTRecoveryEmailPassword",
                            GSTRegDate = new DateTime(2023, 2, 23, 14, 41, 13, 337, DateTimeKind.Utc).AddTicks(1603),
                            GSTUserName = "gstusername",
                            GSTUserPassword = "GSTUserPassword",
                            LastModifiedDate = new DateTime(2023, 2, 23, 14, 41, 13, 337, DateTimeKind.Utc).AddTicks(1619),
                            MobileNumber = "829733325",
                            PhoneNumber = "829733325",
                            ProprietorName = "Rexona Co",
                            RackFileNo = "RackFileNo",
                            StatusId = 1,
                            TallyDataFilePath = "F:\\\\userfolder\\txt1.txt"
                        });
                });

            modelBuilder.Entity("AtoTax.Domain.Entities.GSTClientAddressExtension", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("text");

                    b.Property<string>("AddressLine3")
                        .HasColumnType("text");

                    b.Property<int>("AddressTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("District")
                        .HasColumnType("text");

                    b.Property<Guid>("GSTClientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Pincode")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AddressTypeId");

                    b.HasIndex("GSTClientId");

                    b.HasIndex("StatusId");

                    b.ToTable("GSTClientAddressExtensions");
                });

            modelBuilder.Entity("AtoTax.Domain.Entities.GSTFilingType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FilingType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("GSTFilingTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 2, 23, 14, 41, 13, 337, DateTimeKind.Utc).AddTicks(1775),
                            FilingType = "GSTR-1",
                            LastModifiedDate = new DateTime(2023, 2, 23, 14, 41, 13, 337, DateTimeKind.Utc).AddTicks(1776),
                            StatusId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 2, 23, 14, 41, 13, 337, DateTimeKind.Utc).AddTicks(1778),
                            FilingType = "GSTR-3B",
                            LastModifiedDate = new DateTime(2023, 2, 23, 14, 41, 13, 337, DateTimeKind.Utc).AddTicks(1779),
                            StatusId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 2, 23, 14, 41, 13, 337, DateTimeKind.Utc).AddTicks(1781),
                            FilingType = "GSTR-4",
                            LastModifiedDate = new DateTime(2023, 2, 23, 14, 41, 13, 337, DateTimeKind.Utc).AddTicks(1782),
                            StatusId = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 2, 23, 14, 41, 13, 337, DateTimeKind.Utc).AddTicks(1783),
                            FilingType = "GSTR-5",
                            LastModifiedDate = new DateTime(2023, 2, 23, 14, 41, 13, 337, DateTimeKind.Utc).AddTicks(1784),
                            StatusId = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 2, 23, 14, 41, 13, 337, DateTimeKind.Utc).AddTicks(1786),
                            FilingType = "GSTR-5A",
                            LastModifiedDate = new DateTime(2023, 2, 23, 14, 41, 13, 337, DateTimeKind.Utc).AddTicks(1787),
                            StatusId = 1
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2023, 2, 23, 14, 41, 13, 337, DateTimeKind.Utc).AddTicks(1789),
                            FilingType = "GSTR-6",
                            LastModifiedDate = new DateTime(2023, 2, 23, 14, 41, 13, 337, DateTimeKind.Utc).AddTicks(1789),
                            StatusId = 1
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2023, 2, 23, 14, 41, 13, 337, DateTimeKind.Utc).AddTicks(1791),
                            FilingType = "GSTR-7",
                            LastModifiedDate = new DateTime(2023, 2, 23, 14, 41, 13, 337, DateTimeKind.Utc).AddTicks(1792),
                            StatusId = 1
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2023, 2, 23, 14, 41, 13, 337, DateTimeKind.Utc).AddTicks(1794),
                            FilingType = "GSTR-8",
                            LastModifiedDate = new DateTime(2023, 2, 23, 14, 41, 13, 337, DateTimeKind.Utc).AddTicks(1794),
                            StatusId = 1
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2023, 2, 23, 14, 41, 13, 337, DateTimeKind.Utc).AddTicks(1797),
                            FilingType = "GSTR-9",
                            LastModifiedDate = new DateTime(2023, 2, 23, 14, 41, 13, 337, DateTimeKind.Utc).AddTicks(1798),
                            StatusId = 1
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2023, 2, 23, 14, 41, 13, 337, DateTimeKind.Utc).AddTicks(1799),
                            FilingType = "GSTR-9C",
                            LastModifiedDate = new DateTime(2023, 2, 23, 14, 41, 13, 337, DateTimeKind.Utc).AddTicks(1800),
                            StatusId = 1
                        },
                        new
                        {
                            Id = 11,
                            CreatedDate = new DateTime(2023, 2, 23, 14, 41, 13, 337, DateTimeKind.Utc).AddTicks(1802),
                            FilingType = "GSTR-10",
                            LastModifiedDate = new DateTime(2023, 2, 23, 14, 41, 13, 337, DateTimeKind.Utc).AddTicks(1803),
                            StatusId = 1
                        },
                        new
                        {
                            Id = 12,
                            CreatedDate = new DateTime(2023, 2, 23, 14, 41, 13, 337, DateTimeKind.Utc).AddTicks(1805),
                            FilingType = "GSTR-11",
                            LastModifiedDate = new DateTime(2023, 2, 23, 14, 41, 13, 337, DateTimeKind.Utc).AddTicks(1806),
                            StatusId = 1
                        },
                        new
                        {
                            Id = 13,
                            CreatedDate = new DateTime(2023, 2, 23, 14, 41, 13, 337, DateTimeKind.Utc).AddTicks(1807),
                            FilingType = "CMP-08",
                            LastModifiedDate = new DateTime(2023, 2, 23, 14, 41, 13, 337, DateTimeKind.Utc).AddTicks(1808),
                            StatusId = 1
                        },
                        new
                        {
                            Id = 14,
                            CreatedDate = new DateTime(2023, 2, 23, 14, 41, 13, 337, DateTimeKind.Utc).AddTicks(1810),
                            FilingType = "NILGSTR1",
                            LastModifiedDate = new DateTime(2023, 2, 23, 14, 41, 13, 337, DateTimeKind.Utc).AddTicks(1811),
                            StatusId = 1
                        },
                        new
                        {
                            Id = 15,
                            CreatedDate = new DateTime(2023, 2, 23, 14, 41, 13, 337, DateTimeKind.Utc).AddTicks(1812),
                            FilingType = "NIL3B",
                            LastModifiedDate = new DateTime(2023, 2, 23, 14, 41, 13, 337, DateTimeKind.Utc).AddTicks(1813),
                            StatusId = 1
                        },
                        new
                        {
                            Id = 16,
                            CreatedDate = new DateTime(2023, 2, 23, 14, 41, 13, 337, DateTimeKind.Utc).AddTicks(1815),
                            FilingType = "ITC-04",
                            LastModifiedDate = new DateTime(2023, 2, 23, 14, 41, 13, 337, DateTimeKind.Utc).AddTicks(1816),
                            StatusId = 1
                        });
                });

            modelBuilder.Entity("AtoTax.Domain.Entities.GSTPaidDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<Guid>("GSTClientId")
                        .HasColumnType("uuid");

                    b.Property<bool?>("IsPending")
                        .HasColumnType("boolean");

                    b.Property<string>("PaymentDueMonth")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("PaymentDueYear")
                        .HasColumnType("smallint");

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("ServiceCategoryId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("SettledDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("GSTClientId");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("ServiceCategoryId");

                    b.ToTable("GSTPaidDetails");
                });

            modelBuilder.Entity("AtoTax.Domain.Entities.MultimediaType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Media")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("MultimediaTypes");
                });

            modelBuilder.Entity("AtoTax.Domain.Entities.PaymentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("PaymentTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 2, 23, 14, 41, 13, 337, DateTimeKind.Utc).AddTicks(1726),
                            LastModifiedDate = new DateTime(2023, 2, 23, 14, 41, 13, 337, DateTimeKind.Utc).AddTicks(1729),
                            PaymentMethod = "Cash",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 2, 23, 14, 41, 13, 337, DateTimeKind.Utc).AddTicks(1731),
                            LastModifiedDate = new DateTime(2023, 2, 23, 14, 41, 13, 337, DateTimeKind.Utc).AddTicks(1732),
                            PaymentMethod = "Bank Transfer",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 2, 23, 14, 41, 13, 337, DateTimeKind.Utc).AddTicks(1735),
                            LastModifiedDate = new DateTime(2023, 2, 23, 14, 41, 13, 337, DateTimeKind.Utc).AddTicks(1736),
                            PaymentMethod = "UPIPay",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 2, 23, 14, 41, 13, 337, DateTimeKind.Utc).AddTicks(1737),
                            LastModifiedDate = new DateTime(2023, 2, 23, 14, 41, 13, 337, DateTimeKind.Utc).AddTicks(1738),
                            PaymentMethod = "GooglePay",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 2, 23, 14, 41, 13, 337, DateTimeKind.Utc).AddTicks(1740),
                            LastModifiedDate = new DateTime(2023, 2, 23, 14, 41, 13, 337, DateTimeKind.Utc).AddTicks(1741),
                            PaymentMethod = "Bank Cheque",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2023, 2, 23, 14, 41, 13, 337, DateTimeKind.Utc).AddTicks(1743),
                            LastModifiedDate = new DateTime(2023, 2, 23, 14, 41, 13, 337, DateTimeKind.Utc).AddTicks(1744),
                            PaymentMethod = "PayTM",
                            StatusId = 1
                        });
                });

            modelBuilder.Entity("AtoTax.Domain.Entities.ServiceCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<double>("FixedCharge")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("PreviousCharge")
                        .HasColumnType("double precision");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("ServiceCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 2, 23, 14, 41, 13, 337, DateTimeKind.Utc).AddTicks(1648),
                            Description = "GST Monthly Submission",
                            FixedCharge = 500.0,
                            LastModifiedDate = new DateTime(2023, 2, 23, 14, 41, 13, 337, DateTimeKind.Utc).AddTicks(1650),
                            PreviousCharge = 500.0,
                            ServiceName = "GSTMonthlySubmission",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 2, 23, 14, 41, 13, 337, DateTimeKind.Utc).AddTicks(1653),
                            Description = "GST Amendment",
                            FixedCharge = 500.0,
                            LastModifiedDate = new DateTime(2023, 2, 23, 14, 41, 13, 337, DateTimeKind.Utc).AddTicks(1654),
                            PreviousCharge = 500.0,
                            ServiceName = "GSTAmendment",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 2, 23, 14, 41, 13, 337, DateTimeKind.Utc).AddTicks(1657),
                            Description = "GST Annual Return Filing",
                            FixedCharge = 1000.0,
                            LastModifiedDate = new DateTime(2023, 2, 23, 14, 41, 13, 337, DateTimeKind.Utc).AddTicks(1658),
                            PreviousCharge = 1000.0,
                            ServiceName = "GSTAnnualReturnFiling",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 2, 23, 14, 41, 13, 337, DateTimeKind.Utc).AddTicks(1661),
                            Description = "GST Notice Service",
                            FixedCharge = 1000.0,
                            LastModifiedDate = new DateTime(2023, 2, 23, 14, 41, 13, 337, DateTimeKind.Utc).AddTicks(1662),
                            PreviousCharge = 1000.0,
                            ServiceName = "GSTNoticeService",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 2, 23, 14, 41, 13, 337, DateTimeKind.Utc).AddTicks(1665),
                            Description = "Penalty while transporting",
                            FixedCharge = 1000.0,
                            LastModifiedDate = new DateTime(2023, 2, 23, 14, 41, 13, 337, DateTimeKind.Utc).AddTicks(1666),
                            PreviousCharge = 1000.0,
                            ServiceName = "PenaltyBySquad",
                            StatusId = 1
                        });
                });

            modelBuilder.Entity("AtoTax.Domain.Entities.ServiceChargeUpdateHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AmendedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GSTClientId")
                        .HasColumnType("uuid");

                    b.Property<double>("NewRate")
                        .HasColumnType("double precision");

                    b.Property<double>("PreviousRate")
                        .HasColumnType("double precision");

                    b.Property<int>("ServiceCategoryId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GSTClientId");

                    b.HasIndex("ServiceCategoryId");

                    b.ToTable("ServiceChargeUpdateHistories");
                });

            modelBuilder.Entity("AtoTax.Domain.Entities.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("StatusType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Status");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            StatusType = "active"
                        },
                        new
                        {
                            Id = 2,
                            StatusType = "inactive"
                        });
                });

            modelBuilder.Entity("AtoTax.Domain.Entities.UserLoggedActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Activity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AdditionalDetails")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("loggedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("UserLoggedActivities");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AtoTax.Domain.Entities.AccountsLedger", b =>
                {
                    b.HasOne("AtoTax.Domain.Entities.GSTClient", "GSTClient")
                        .WithMany()
                        .HasForeignKey("GSTClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GSTClient");
                });

            modelBuilder.Entity("AtoTax.Domain.Entities.AddressType", b =>
                {
                    b.HasOne("AtoTax.Domain.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("AtoTax.Domain.Entities.AmendType", b =>
                {
                    b.HasOne("AtoTax.Domain.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("AtoTax.Domain.Entities.Amendment", b =>
                {
                    b.HasOne("AtoTax.Domain.Entities.AmendType", "AmendType")
                        .WithMany()
                        .HasForeignKey("AmendTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AtoTax.Domain.Entities.ApprovalStatusType", "ApprovalStatusType")
                        .WithMany()
                        .HasForeignKey("ApprovalStatusTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AtoTax.Domain.Entities.GSTClient", "GSTClient")
                        .WithMany()
                        .HasForeignKey("GSTClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AmendType");

                    b.Navigation("ApprovalStatusType");

                    b.Navigation("GSTClient");
                });

            modelBuilder.Entity("AtoTax.Domain.Entities.ClientFeeMap", b =>
                {
                    b.HasOne("AtoTax.Domain.Entities.GSTClient", "GSTClient")
                        .WithMany()
                        .HasForeignKey("GSTClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AtoTax.Domain.Entities.ServiceCategory", "ServiceCategory")
                        .WithMany()
                        .HasForeignKey("ServiceCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GSTClient");

                    b.Navigation("ServiceCategory");
                });

            modelBuilder.Entity("AtoTax.Domain.Entities.CollectionAndBalance", b =>
                {
                    b.HasOne("AtoTax.Domain.Entities.GSTClient", "GSTClient")
                        .WithMany()
                        .HasForeignKey("GSTClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GSTClient");
                });

            modelBuilder.Entity("AtoTax.Domain.Entities.EmpJobRole", b =>
                {
                    b.HasOne("AtoTax.Domain.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("AtoTax.Domain.Entities.Employee", b =>
                {
                    b.HasOne("AtoTax.Domain.Entities.EmpJobRole", "EmpJobRole")
                        .WithMany()
                        .HasForeignKey("EmpJobRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AtoTax.Domain.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmpJobRole");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("AtoTax.Domain.Entities.GSTBillAndFeeCollection", b =>
                {
                    b.HasOne("AtoTax.Domain.Entities.Employee", "FiledByEmployee")
                        .WithMany()
                        .HasForeignKey("FiledByEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AtoTax.Domain.Entities.GSTClient", "GSTClient")
                        .WithMany()
                        .HasForeignKey("GSTClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AtoTax.Domain.Entities.GSTFilingType", "GSTFilingType")
                        .WithMany()
                        .HasForeignKey("GSTFilingTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AtoTax.Domain.Entities.Employee", "ReceivedByEmployee")
                        .WithMany()
                        .HasForeignKey("ReceivedByEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AtoTax.Domain.Entities.ServiceCategory", "ServiceCategory")
                        .WithMany()
                        .HasForeignKey("ServiceCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FiledByEmployee");

                    b.Navigation("GSTClient");

                    b.Navigation("GSTFilingType");

                    b.Navigation("ReceivedByEmployee");

                    b.Navigation("ServiceCategory");
                });

            modelBuilder.Entity("AtoTax.Domain.Entities.GSTClient", b =>
                {
                    b.HasOne("AtoTax.Domain.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("AtoTax.Domain.Entities.GSTClientAddressExtension", b =>
                {
                    b.HasOne("AtoTax.Domain.Entities.AddressType", "AddressType")
                        .WithMany()
                        .HasForeignKey("AddressTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AtoTax.Domain.Entities.GSTClient", "GSTClient")
                        .WithMany()
                        .HasForeignKey("GSTClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AtoTax.Domain.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AddressType");

                    b.Navigation("GSTClient");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("AtoTax.Domain.Entities.GSTFilingType", b =>
                {
                    b.HasOne("AtoTax.Domain.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("AtoTax.Domain.Entities.GSTPaidDetail", b =>
                {
                    b.HasOne("AtoTax.Domain.Entities.GSTClient", "GSTClient")
                        .WithMany()
                        .HasForeignKey("GSTClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AtoTax.Domain.Entities.PaymentType", "PaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AtoTax.Domain.Entities.ServiceCategory", "ServiceCategory")
                        .WithMany()
                        .HasForeignKey("ServiceCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GSTClient");

                    b.Navigation("PaymentType");

                    b.Navigation("ServiceCategory");
                });

            modelBuilder.Entity("AtoTax.Domain.Entities.MultimediaType", b =>
                {
                    b.HasOne("AtoTax.Domain.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("AtoTax.Domain.Entities.PaymentType", b =>
                {
                    b.HasOne("AtoTax.Domain.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("AtoTax.Domain.Entities.ServiceCategory", b =>
                {
                    b.HasOne("AtoTax.Domain.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("AtoTax.Domain.Entities.ServiceChargeUpdateHistory", b =>
                {
                    b.HasOne("AtoTax.Domain.Entities.GSTClient", "GSTClient")
                        .WithMany()
                        .HasForeignKey("GSTClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AtoTax.Domain.Entities.ServiceCategory", "ServiceCategory")
                        .WithMany()
                        .HasForeignKey("ServiceCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GSTClient");

                    b.Navigation("ServiceCategory");
                });

            modelBuilder.Entity("AtoTax.Domain.Entities.UserLoggedActivity", b =>
                {
                    b.HasOne("AtoTax.Domain.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AtoTax.API.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AtoTax.API.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AtoTax.API.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AtoTax.API.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
